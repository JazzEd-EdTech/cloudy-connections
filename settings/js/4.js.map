{"version":3,"sources":["webpack:///./node_modules/marked/lib/marked.js","webpack:///./node_modules/dompurify/dist/purify.js"],"names":["global","root","block","newline","code","fences","noop","hr","heading","nptable","blockquote","list","html","def","table","lheading","paragraph","text","Lexer","options","this","tokens","links","Object","create","marked","defaults","rules","normal","pedantic","gfm","tables","_label","_title","edit","replace","getRegex","bullet","item","source","_tag","_comment","merge","lex","src","prototype","token","top","next","loose","cap","bull","b","listStart","listItems","t","space","i","tag","l","isordered","istask","ischecked","exec","substring","length","push","type","rtrim","lang","trim","depth","header","splitCells","align","split","cells","test","ordered","start","match","indexOf","RegExp","smartLists","slice","join","charAt","undefined","task","checked","sanitize","pre","sanitizer","toLowerCase","href","title","Error","charCodeAt","inline","escape","autolink","url","link","reflink","nolink","strong","em","br","del","InlineLexer","renderer","Renderer","breaks","TextRenderer","Parser","slugger","Slugger","seen","encode","escapeTest","escapeReplace","ch","replacements","escapeTestNoEncode","escapeReplaceNoEncode","unescape","_","n","String","fromCharCode","parseInt","regex","opt","name","val","cleanUrl","base","prot","decodeURIComponent","e","originIndependentUrl","baseUrls","resolveUrl","encodeURI","_punctuation","_escapes","_scheme","_email","_attribute","_href","_extended_email","_backpedal","output","prevCapZero","out","inLink","inRawBlock","outputLink","escapes","codespan","mangle","smartypants","image","Math","random","toString","infostring","escaped","highlight","langPrefix","quote","level","raw","headerIds","headerPrefix","slug","xhtml","body","listitem","checkbox","tablerow","content","tablecell","flags","baseUrl","parse","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","errMsg","silent","console","log","value","hasOwnProperty","originalSlug","&","<",">","\"","'","obj","target","key","arguments","call","tableRow","count","offset","str","curr","splice","c","invert","suffLen","currChar","substr","callback","pending","done","err","message","setOptions","getDefaults","parser","lexer","inlineLexer","module","exports","window","svg","svgFilters","mathMl","html$1","svg$1","mathMl$1","xml","addToSet","set","array","clone","object","newObject","property","MUSTACHE_EXPR","ERB_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","_typeof","Symbol","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","from","getGlobal","createDOMPurify","DOMPurify","version","removed","document","nodeType","isSupported","originalDocument","useDOMParser","removeTitle","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","_window$NamedNodeMap","NamedNodeMap","MozNamedAttrMap","Text","Comment","DOMParser","template","createElement","ownerDocument","_document","implementation","createNodeIterator","getElementsByTagName","createDocumentFragment","importNode","hooks","createHTMLDocument","documentMode","MUSTACHE_EXPR$$1","ERB_EXPR$$1","DATA_ATTR$$1","ARIA_ATTR$$1","IS_SCRIPT_OR_DATA$$1","ATTR_WHITESPACE$$1","IS_ALLOWED_URI$$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","concat","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","SAFE_FOR_JQUERY","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_DOM_IMPORT","SANITIZE_DOM","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","CONFIG","formElement","_parseConfig","cfg","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","ADD_URI_SAFE_ATTR","freeze","_forceRemove","node","element","parentNode","removeChild","outerHTML","_removeAttribute","attribute","getAttributeNode","removeAttribute","_initDocument","dirty","doc","parseFromString","documentElement","_doc","firstElementChild","querySelector","textContent","_createIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","FILTER_ACCEPT","_isNode","nodeName","_executeHook","entryPoint","currentNode","data","forEach","hook","_sanitizeElements","elm","attributes","setAttribute","tagName","allowedTags","insertAdjacentHTML","innerHTML","cloneNode","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","attr","idAttr","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","_attr","namespaceURI","id","apply","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","importedNode","oldNode","returnNode","TypeError","toStaticHTML","appendChild","firstChild","nodeIterator","setConfig","clearConfig","isValidAttribute","addHook","hookFunction","removeHook","removeHooks","removeAllHooks","factory"],"mappings":"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","file":"4.js","sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}\\.)/;\nblock.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ {0,3}(`{3,}|~{3,})([^`\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? rtrim(cap, '\\n')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) */, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull.length > 1 ? b.length === 1\n            : (b.length > 1 || (this.options.smartLists && b !== bull))) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s_])__(?!_)|^\\*\\*([^\\s*])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*\"<\\[])\\*(?!\\*)|^_([^\\s][\\s\\S]*?[^\\s_])_(?!_|[^\\spunctuation])|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_|[^\\spunctuation])|^\\*([^\\s\"<\\[][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^(`+|[^`])[\\s\\S]*?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\n// list of punctuation marks from common mark spec\n// without ` and ] to workaround Rule 17 (inline code blocks/links)\ninline._punctuation = '!\"#$%&\\'()*+,\\\\-./:;<=>?@\\\\[^_{|}~';\ninline.em = edit(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|$', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|$')\n    .getRegex()\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += escape(cap[1]);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = true;\n      } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = false;\n      }\n\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      src = src.substring(cap[0].length);\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (this.inRawBlock) {\n        out += this.renderer.text(cap[0]);\n      } else {\n        out += this.renderer.text(escape(this.smartypants(cap[0])));\n      }\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, infostring, escaped) {\n  var lang = (infostring || '').match(/\\S*/)[0];\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw, slugger) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + slugger.slug(raw)\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n};\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n};\n\nTextRenderer.prototype.br = function() {\n  return '';\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n  this.slugger = new Slugger();\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)),\n        this.slugger);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n    default: {\n      var errMsg = 'Token with \"' + this.token.type + '\" type was not found.';\n      if (this.options.silent) {\n        console.log(errMsg);\n      } else {\n        throw new Error(errMsg);\n      }\n    }\n  }\n};\n\n/**\n * Slugger generates header id\n */\n\nfunction Slugger () {\n  this.seen = {};\n}\n\n/**\n * Convert string to unique id\n */\n\nSlugger.prototype.slug = function (value) {\n  var slug = value\n    .toLowerCase()\n    .trim()\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n    .replace(/\\s/g, '-');\n\n  if (this.seen.hasOwnProperty(slug)) {\n    var originalSlug = slug;\n    do {\n      this.seen[originalSlug]++;\n      slug = originalSlug + '-' + this.seen[originalSlug];\n    } while (this.seen.hasOwnProperty(slug));\n  }\n  this.seen[slug] = 0;\n\n  return slug;\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escape.escapeTest.test(html)) {\n      return html.replace(escape.escapeReplace, function (ch) { return escape.replacements[ch]; });\n    }\n  } else {\n    if (escape.escapeTestNoEncode.test(html)) {\n      return html.replace(escape.escapeReplaceNoEncode, function (ch) { return escape.replacements[ch]; });\n    }\n  }\n\n  return html;\n}\n\nescape.escapeTest = /[&<>\"']/;\nescape.escapeReplace = /[&<>\"']/g;\nescape.replacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nescape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nescape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n};\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.Slugger = Slugger;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.DOMPurify = factory());\n}(this, (function () { 'use strict';\n\nvar html = ['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr'];\n\n// SVG\nvar svg = ['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern'];\n\nvar svgFilters = ['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence'];\n\nvar mathMl = ['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmuliscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mpspace', 'msqrt', 'mystyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover'];\n\nvar text = ['#text'];\n\nvar html$1 = ['accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'coords', 'crossorigin', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'integrity', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns'];\n\nvar svg$1 = ['accent-height', 'accumulate', 'additivive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan'];\n\nvar mathMl$1 = ['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns'];\n\nvar xml = ['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink'];\n\n/* Add properties to a lookup table */\nfunction addToSet(set, array) {\n  var l = array.length;\n  while (l--) {\n    if (typeof array[l] === 'string') {\n      array[l] = array[l].toLowerCase();\n    }\n    set[array[l]] = true;\n  }\n  return set;\n}\n\n/* Shallow clone an object */\nfunction clone(object) {\n  var newObject = {};\n  var property = void 0;\n  for (property in object) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      newObject[property] = object[property];\n    }\n  }\n  return newObject;\n}\n\nvar MUSTACHE_EXPR = /\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm; // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nvar ERB_EXPR = /<%[\\s\\S]*|[\\s\\S]*%>/gm;\nvar DATA_ATTR = /^data-[\\-\\w.\\u00B7-\\uFFFF]/; // eslint-disable-line no-useless-escape\nvar ARIA_ATTR = /^aria-[\\-\\w]+$/; // eslint-disable-line no-useless-escape\nvar IS_ALLOWED_URI = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i; // eslint-disable-line no-useless-escape\nvar IS_SCRIPT_OR_DATA = /^(?:\\w+script|data):/i;\nvar ATTR_WHITESPACE = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g; // eslint-disable-line no-control-regex\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar getGlobal = function getGlobal() {\n  return typeof window === 'undefined' ? null : window;\n};\n\nfunction createDOMPurify() {\n  var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n  var DOMPurify = function DOMPurify(root) {\n    return createDOMPurify(root);\n  };\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  DOMPurify.version = '1.0.8';\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  DOMPurify.removed = [];\n\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n\n    return DOMPurify;\n  }\n\n  var originalDocument = window.document;\n  var useDOMParser = false; // See comment below\n  var removeTitle = false; // See comment below\n\n  var document = window.document;\n  var DocumentFragment = window.DocumentFragment,\n      HTMLTemplateElement = window.HTMLTemplateElement,\n      Node = window.Node,\n      NodeFilter = window.NodeFilter,\n      _window$NamedNodeMap = window.NamedNodeMap,\n      NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\n      Text = window.Text,\n      Comment = window.Comment,\n      DOMParser = window.DOMParser;\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n\n  if (typeof HTMLTemplateElement === 'function') {\n    var template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  var _document = document,\n      implementation = _document.implementation,\n      createNodeIterator = _document.createNodeIterator,\n      getElementsByTagName = _document.getElementsByTagName,\n      createDocumentFragment = _document.createDocumentFragment;\n  var importNode = originalDocument.importNode;\n\n\n  var hooks = {};\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;\n\n  var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\n      ERB_EXPR$$1 = ERB_EXPR,\n      DATA_ATTR$$1 = DATA_ATTR,\n      ARIA_ATTR$$1 = ARIA_ATTR,\n      IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\n      ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\n  var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n\n  var ALLOWED_TAGS = null;\n  var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(svgFilters), _toConsumableArray(mathMl), _toConsumableArray(text)));\n\n  /* Allowed attribute names */\n  var ALLOWED_ATTR = null;\n  var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(mathMl$1), _toConsumableArray(xml)));\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  var FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  var FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  var ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  var ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  var ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Output should be safe for jQuery's $() factory? */\n  var SAFE_FOR_JQUERY = false;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  var SAFE_FOR_TEMPLATES = false;\n\n  /* Decide if document with <html>... should be returned */\n  var WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  var SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  var FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html string.\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  var RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html string */\n  var RETURN_DOM_FRAGMENT = false;\n\n  /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n   * `Node` is imported into the current `Document`. If this flag is not enabled the\n   * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n   * DOMPurify. */\n  var RETURN_DOM_IMPORT = false;\n\n  /* Output should be free from DOM clobbering attacks? */\n  var SANITIZE_DOM = true;\n\n  /* Keep element content when removing element? */\n  var KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  var IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  var USE_PROFILES = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  var FORBID_CONTENTS = addToSet({}, ['audio', 'head', 'math', 'script', 'style', 'template', 'svg', 'video']);\n\n  /* Tags that are safe for data: URIs */\n  var DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image']);\n\n  /* Attributes safe for values like \"javascript:\" */\n  var URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);\n\n  /* Keep a reference to config to pass to hooks */\n  var CONFIG = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  var formElement = document.createElement('form');\n\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  var _parseConfig = function _parseConfig(cfg) {\n    /* Shield configuration object from tampering */\n    if ((typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\n      cfg = {};\n    }\n    /* Set configuration parameters */\n    ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n    IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\n\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(text)));\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, html);\n        addToSet(ALLOWED_ATTR, html$1);\n      }\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, svg);\n        addToSet(ALLOWED_ATTR, svg$1);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, svgFilters);\n        addToSet(ALLOWED_ATTR, svg$1);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, mathMl);\n        addToSet(ALLOWED_ATTR, mathMl$1);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n    }\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n    }\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (Object && 'freeze' in Object) {\n      Object.freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n  var _forceRemove = function _forceRemove(node) {\n    DOMPurify.removed.push({ element: node });\n    try {\n      node.parentNode.removeChild(node);\n    } catch (err) {\n      node.outerHTML = '';\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n  var _removeAttribute = function _removeAttribute(name, node) {\n    try {\n      DOMPurify.removed.push({\n        attribute: node.getAttributeNode(name),\n        from: node\n      });\n    } catch (err) {\n      DOMPurify.removed.push({\n        attribute: null,\n        from: node\n      });\n    }\n    node.removeAttribute(name);\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n  var _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    var doc = void 0;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    }\n\n    /* Use DOMParser to workaround Firefox bug (see comment below) */\n    if (useDOMParser) {\n      try {\n        doc = new DOMParser().parseFromString(dirty, 'text/html');\n      } catch (err) {}\n    }\n\n    /* Remove title to fix an mXSS bug in older MS Edge */\n    if (removeTitle) {\n      addToSet(FORBID_TAGS, ['title']);\n    }\n\n    /* Otherwise use createHTMLDocument, because DOMParser is unsafe in\n    Safari (see comment below) */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createHTMLDocument('');\n      var _doc = doc,\n          body = _doc.body;\n\n      body.parentNode.removeChild(body.parentNode.firstElementChild);\n      body.outerHTML = dirty;\n    }\n\n    /* Work on whole document or just its body */\n    return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n  };\n\n  // Firefox uses a different parser for innerHTML rather than\n  // DOMParser (see https://bugzilla.mozilla.org/show_bug.cgi?id=1205631)\n  // which means that you *must* use DOMParser, otherwise the output may\n  // not be safe if used in a document.write context later.\n  //\n  // So we feature detect the Firefox bug and use the DOMParser if necessary.\n  //\n  // MS Edge, in older versions, is affected by an mXSS behavior. The second\n  // check tests for the behavior and fixes it if necessary.\n  if (DOMPurify.isSupported) {\n    (function () {\n      try {\n        var doc = _initDocument('<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">');\n        if (doc.querySelector('svg img')) {\n          useDOMParser = true;\n        }\n      } catch (err) {}\n    })();\n    (function () {\n      try {\n        var doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');\n        if (doc.querySelector('title').textContent.match(/<\\/title/)) {\n          removeTitle = true;\n        }\n      } catch (err) {}\n    })();\n  }\n\n  /**\n   * _createIterator\n   *\n   * @param  {Document} root document/fragment to create iterator for\n   * @return {Iterator} iterator instance\n   */\n  var _createIterator = function _createIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\n      return NodeFilter.FILTER_ACCEPT;\n    }, false);\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n  var _isClobbered = function _isClobbered(elm) {\n    if (elm instanceof Text || elm instanceof Comment) {\n      return false;\n    }\n    if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function') {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * _isNode\n   *\n   * @param  {Node} obj object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n  var _isNode = function _isNode(obj) {\n    return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? obj instanceof Node : obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';\n  };\n\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n  var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n\n    hooks[entryPoint].forEach(function (hook) {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n  var _sanitizeElements = function _sanitizeElements(currentNode) {\n    var content = void 0;\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeElements', currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    var tagName = currentNode.nodeName.toLowerCase();\n\n    /* Execute a hook if present */\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName: tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Keep content except for black-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {\n        try {\n          currentNode.insertAdjacentHTML('AfterEnd', currentNode.innerHTML);\n        } catch (err) {}\n      }\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Convert markup to cover jQuery behavior */\n    if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild) && /</g.test(currentNode.textContent)) {\n      DOMPurify.removed.push({ element: currentNode.cloneNode() });\n      if (currentNode.innerHTML) {\n        currentNode.innerHTML = currentNode.innerHTML.replace(/</g, '&lt;');\n      } else {\n        currentNode.innerHTML = currentNode.textContent.replace(/</g, '&lt;');\n      }\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      content = content.replace(MUSTACHE_EXPR$$1, ' ');\n      content = content.replace(ERB_EXPR$$1, ' ');\n      if (currentNode.textContent !== content) {\n        DOMPurify.removed.push({ element: currentNode.cloneNode() });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeElements', currentNode, null);\n\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n      return false;\n    }\n\n    /* Sanitize attribute content to be template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      value = value.replace(MUSTACHE_EXPR$$1, ' ');\n      value = value.replace(ERB_EXPR$$1, ' ');\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && DATA_ATTR$$1.test(lcName)) {\n      // This attribute is safe\n    } else if (ALLOW_ARIA_ATTR && ARIA_ATTR$$1.test(lcName)) {\n      // This attribute is safe\n      /* Otherwise, check the name is permitted */\n    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      return false;\n\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n      // This attribute is safe\n      /* Check no script, data or unknown possibly unsafe URI\n        unless we know URI values are safe for that attribute */\n    } else if (IS_ALLOWED_URI$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) {\n      // This attribute is safe\n      /* Keep image data URIs alive if src/xlink:href is allowed */\n      /* Further prevent gadget XSS for dynamically built script tags */\n    } else if ((lcName === 'src' || lcName === 'xlink:href') && lcTag !== 'script' && value.indexOf('data:') === 0 && DATA_URI_TAGS[lcTag]) {\n      // This attribute is safe\n      /* Allow unknown protocols: This provides support for links that\n        are handled by protocol handlers which may be unknown ahead of\n        time, e.g. fb:, spotify: */\n    } else if (ALLOW_UNKNOWN_PROTOCOLS && !IS_SCRIPT_OR_DATA$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) {\n      // This attribute is safe\n      /* Check for binary attributes */\n      // eslint-disable-next-line no-negated-condition\n    } else if (!value) {\n      // Binary attributes are safe at this point\n      /* Anything else, presume unsafe, do not add it back */\n    } else {\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} node to sanitize\n   */\n  // eslint-disable-next-line complexity\n  var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    var attr = void 0;\n    var value = void 0;\n    var lcName = void 0;\n    var idAttr = void 0;\n    var l = void 0;\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n    var attributes = currentNode.attributes;\n\n    /* Check if we have attributes; if not we might have a text node */\n\n    if (!attributes) {\n      return;\n    }\n\n    var hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR\n    };\n    l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      attr = attributes[l];\n      var _attr = attr,\n          name = _attr.name,\n          namespaceURI = _attr.namespaceURI;\n\n      value = attr.value.trim();\n      lcName = name.toLowerCase();\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n      value = hookEvent.attrValue;\n\n      /* Remove attribute */\n      // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to\n      // remove a \"name\" attribute from an <img> tag that has an \"id\"\n      // attribute at the time.\n      if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {\n        idAttr = attributes.id;\n        attributes = Array.prototype.slice.apply(attributes);\n        _removeAttribute('id', currentNode);\n        _removeAttribute(name, currentNode);\n        if (attributes.indexOf(idAttr) > l) {\n          currentNode.setAttribute('id', idAttr.value);\n        }\n      } else if (\n      // This works around a bug in Safari, where input[type=file]\n      // cannot be dynamically set after type has been removed\n      currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {\n        continue;\n      } else {\n        // This avoids a crash in Safari v9.0 with double-ids.\n        // The trick is to first set the id to be empty and then to\n        // remove the attribute\n        if (name === 'id') {\n          currentNode.setAttribute(name, '');\n        }\n        _removeAttribute(name, currentNode);\n      }\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Is `value` valid for this attribute? */\n      var lcTag = currentNode.nodeName.toLowerCase();\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n        DOMPurify.removed.pop();\n      } catch (err) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n  var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    var shadowNode = void 0;\n    var shadowIterator = _createIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(shadowNode);\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} configuration object\n   */\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty, cfg) {\n    var body = void 0;\n    var importedNode = void 0;\n    var currentNode = void 0;\n    var oldNode = void 0;\n    var returnNode = void 0;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    if (!dirty) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      // eslint-disable-next-line no-negated-condition\n      if (typeof dirty.toString !== 'function') {\n        throw new TypeError('toString is not a function');\n      } else {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw new TypeError('dirty is not a string, aborting');\n        }\n      }\n    }\n\n    /* Check we can run. Otherwise fall back or ignore */\n    if (!DOMPurify.isSupported) {\n      if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\n        if (typeof dirty === 'string') {\n          return window.toStaticHTML(dirty);\n        }\n        if (_isNode(dirty)) {\n          return window.toStaticHTML(dirty.outerHTML);\n        }\n      }\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    if (IN_PLACE) {\n      /* No special handling necessary for in-place sanitization */\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!-->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else {\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !WHOLE_DOCUMENT && dirty.indexOf('<') === -1) {\n        return dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : '';\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Fix IE's strange behavior with manipulated textNodes #89 */\n      if (currentNode.nodeType === 3 && currentNode === oldNode) {\n        continue;\n      }\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(currentNode);\n\n      oldNode = currentNode;\n    }\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (RETURN_DOM_IMPORT) {\n        /* AdoptNode() is not used because internal state is not reset\n               (e.g. the past names map of a HTMLFormElement), this is safe\n               in theory but we would rather not risk another attack vector.\n               The state that is cloned by importNode() is explicitly defined\n               by the specs. */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    return WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n  };\n\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n  DOMPurify.setConfig = function (cfg) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {string} tag Tag name of containing element.\n   * @param  {string} attr Attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n    var lcTag = tag.toLowerCase();\n    var lcName = attr.toLowerCase();\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    hooks[entryPoint].push(hookFunction);\n  };\n\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   */\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint].pop();\n    }\n  };\n\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   *\n   */\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n\n  return DOMPurify;\n}\n\nvar purify = createDOMPurify();\n\nreturn purify;\n\n})));\n//# sourceMappingURL=purify.js.map\n"],"sourceRoot":""}